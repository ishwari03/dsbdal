# LINEAR REGRESSION
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
df = pd.read_csv("BostonHousing.csv")

# Display column names
print(df.columns)

# Dataset overview
print(df.info())
print(df.describe())

# Check for missing values
print(df.isnull().sum())

# Correlation matrix
plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

# Splitting features and target
X = df.drop('medv', axis=1)  # Features
y = df['medv']               # Target (Median value of owner-occupied homes)

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Training the Linear Regression model
lr = LinearRegression()
lr.fit(X_train, y_train)

# Making predictions and evaluating the model
y_pred = lr.predict(X_test)

# Evaluation
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (RÂ²):", r2_score(y_test, y_pred))

# Visualizing Actual vs Predicted Prices
plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred, color='blue')  # Blue points represent the predictions
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # Red line: Ideal case
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.grid(True)
plt.show()
